; -*- emacs-lisp -*-
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; This is Bryan Murdock's .emacs file.  It began as a simple copy
;; from a fellow BYU students .emacs file, and has morphed greatly
;; since.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; settings and default modes
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Highlight matching parenthesis
(show-paren-mode t)

;; hitting delete will delete the highlighted region
(pending-delete-mode 1)

;;;; The MODE Line ;;;;
(column-number-mode 1)

;;;;; no silly tool bar at the top ;;;
(tool-bar-mode -1)

;;; taking the plunge and getting rid of the menu too
(menu-bar-mode -1)

;;; even more hardcore, no scrollbars
(scroll-bar-mode -1)

;; enable ido-mode
(ido-mode t)
(ido-everywhere t)

;;;;; scroll one line at a time ;;;;
(setq scroll-conservatively 5)

;; title bar shows name of current buffer and hostname
(setq frame-title-format '("emacs on " system-name ": %*%+ %b"))

;; don't show the startup message every time, I know I'm using emacs
;; thanks
(setq inhibit-startup-message t)

;; don't blink the cursor
(blink-cursor-mode -1)

;;;; use y or n instead of yes or no
(fset 'yes-or-no-p 'y-or-n-p)

;; paste where the cursor is, not where I'm pointing.  Sometimes I
;; love it, sometimes I hate it...
(setq mouse-yank-at-point t)

;; Highlight current line, I might not like this on all the time.
(global-hl-line-mode 1)
(set-face-background 'hl-line "RoyalBlue4")

;; start server so emacsclient can be used.  Allows you to type
;; emacsclient filename on the command line and the file is opened in
;; the currently running emacs.  Actually I always do emacsclient -n
;; filename (actually a script called e)
(ignore-errors (server-start))

;;;;;;;;;;;;;;;;;; I need a bit bigger default font ;;;;;;;;;;;;;;;;;
;;
;; all about fonts in emacs:
;; http://www.cs.huji.ac.il/support/emacs/font.html
(if (string-match "bryan-murdock" system-name)
     (set-default-font
      "-apple-Menlo-medium-normal-normal-*-14-*-*-*-m-0-iso10646-1"))

;;;;;;; ediff buffers sid-by-side, like it should ;;;;;;;;;;
(setq ediff-split-window-function 'split-window-horizontally)

;; also, don't pop-up a seperate frame, just make a new window:
(setq ediff-window-setup-function 'ediff-setup-windows-plain)

;; allows you to undow changes to your window configureations (like
;; after an ediff session) by doing c-c left-arrow (or right-arrow for
;; a redo).  Very handy
(winner-mode t)

;; some people get upset if you use tabs instead of spaces, but I've
;; never seen anyone get upset for doing things the other way around,
;; so I decided to just use this (in short, uses spaces to indent
;; stuff, not tabs)
(setq-default indent-tabs-mode nil)

;;;;;;;;;;;;;;;;; Use cperl-mode instead of perl-mode ;;;;;;;;;;;;;;
(add-to-list 'auto-mode-alist '("\\.\\([pP][Llm]\\|al\\)\\'" . cperl-mode))
(add-to-list 'interpreter-mode-alist '("perl" . cperl-mode))
(add-to-list 'interpreter-mode-alist '("perl5" . cperl-mode))
(add-to-list 'interpreter-mode-alist '("miniperl" . cperl-mode))

;; don't underline trailing whitespace (such an odd feature)
;; hmmmm...this doesn't work
(setq cperl-invalid-face nil)

;; modelsim do files are pretty-much TCL
(add-to-list 'auto-mode-alist '("\\.do?\\'" . tcl-mode))
;; xilinx ucf is kinda tcl, I think
(add-to-list 'auto-mode-alist '("\\.ucf?\\'" . tcl-mode))

;; conf mode for hgrc files
(add-to-list 'auto-mode-alist '("\\hgrc?\\'" . conf-mode))

;; set the compilation buffer to always scroll to follow output as it
;; comes in.
(setq compilation-scroll-output 1)

;; enable this command that is disabled by default because it's
;; "confusing"
(put 'narrow-to-region 'disabled nil)

;;;;;;;;;;;;;; store backup files in ~/.backups-emacs/ ;;;;;;;;;;
(setq
 backup-by-copying t                    ; don't clobber symlinks
 backup-directory-alist
 '(("." . "~/.backups-emacs"))          ; don't litter my fs tree
 delete-old-versions t
 kept-new-versionhs 6
 kept-old-versions 2
 version-control t)                     ; use versioned backups

;; This causes files that I'm editing to be saved automatically by the
;; emacs auto-save functionality.  I'm hoping to break myself of the
;; c-x c-s twitch.
(add-hook 'auto-save-hook 'save-buffer-if-visiting-file)

;; save every 20 characters typed (this is the minimum)
(setq auto-save-interval 20)

;; save after 1 second of idle time (default is 30)
(setq auto-save-timeout 1)

;; I don't use WoMan much, but when I do, I don't want it to pop up a
;; new window (known as a frame in emacs land):
(setq woman-use-own-frame nil)

;; This is sweet!  right-click, get a list of functions in the source
;; file you are editing
;; (http://emacs.wordpress.com/2007/01/24/imenu-with-a-workaround/#comment-51)
(global-set-key [mouse-3] `imenu)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Hooks and mode settings
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(add-hook 'c-mode-common-hook '(lambda ()
                                 (setq c-basic-offset 4)
                                 ;; everyone at work seems to format
                                 ;; their code this way:
                                 (c-set-style "stroustrup")
                                 ;;With tab doing completion, M-tab is
                                 ;;free for indent-region
                                 (local-set-key [?\C-c tab] 'indent-region)
                                 ))

(autoload 'verilog-mode "/tools/verilog/verilog-mode"  "Verilog mode" t )
;; fix the tags keybinding that verilog-mode breaks
(defun my-verilog-hook ()
  ;; don't let verilog mode take over pop-tag-mark:
  (define-key verilog-mode-map "\M-*" nil)
  ;; electric-verilog-semi was driving me nuts:
  (define-key verilog-mode-map ";" nil)
  ;; the (setq verilog-auto-indent-on-newline nil) below wasn't
  ;; stopping the auto indentation, but this does:
  (define-key verilog-mode-map "\r" nil)
  ;; at least with emacs -nw tab was not being bound to smart-tab like
  ;; I wanted, this fixes it:
  (define-key verilog-mode-map "\t" nil)
  (setq verilog-auto-lineup 'ignore)
  (setq verilog-auto-newline nil)
  (setq verilog-auto-indent-on-newline nil)
  (defun verilog-list-methods()
    (interactive)
    (occur "\\( function \\| task \\)" nil)))
(add-hook 'verilog-mode-hook 'my-verilog-hook)

;; (add-hook 'verilog-mode-hook
;;           '(lambda ()
;;              (modify-syntax-entry ?_ "." verilog-mode-syntax-table)))

(add-to-list 'auto-mode-alist '("\\.svh?\\'" . verilog-mode))
(add-to-list 'auto-mode-alist '("\\.vh?\\'" . verilog-mode))
(add-to-list 'auto-mode-alist '("\\.f?\\'" . verilog-mode))

;; org-mode stuff
(setq org-log-done t)
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
(setq org-return-follows-link t)
;; org-agenda
(setq org-agenda-files (list "~/Documents/scouts/troop_311/notes.org"))
;; view next 30 days by default, not just a week
(setq org-agenda-span 30)

;; google calendar gets the timezone wrong, but the internet
;; (http://comments.gmane.org/gmane.emacs.orgmode/30210) says this
;; will fix it:
(setq org-icalendar-use-UTC-date-time t)

;; wrap long lines in text modes:
(add-hook 'text-mode-hook 'turn-on-visual-line-mode)

;; With this you can put dot source code in a #+begin_src...#+end_src
;; block, hit c-c c-c and it will turn it into an image and display it
;; inline.  It also gets exported to your pdf with the rest of your
;; document.  Pretty dang awesome.  Found this here:
;; http://doc.norang.ca/org-mode.html#Publishing
;;
;; The above also mentions ditaa that turns ascii art into pretty
;; pictures too.

(add-hook 'org-babel-after-execute-hook 'bh/display-inline-images 'append)
(add-hook 'org-mode-hook 'bh/load-languages 'append)

(setq org-ditaa-jar-path "~/src/ditaa/ditaa0_9.jar")

; Make babel results blocks lowercase
(setq org-babel-results-keyword "results")

(defun bh/display-inline-images ()
  (condition-case nil
      (org-display-inline-images)
    (error nil)))

(defun bh/load-languages ()
  (org-babel-do-load-languages
   (quote org-babel-load-languages)
   (quote ((emacs-lisp . t)
           (dot . t)
           (ditaa . t)
           (python . t)
           (sh . t)
           (org . t)
           (latex . t)))))

;; add support to org-mode for the IEEEtran latex class:
(eval-after-load 'org-latex
  '(add-to-list 'org-export-latex-classes
               '("IEEEtran"
                 "\\documentclass{IEEEtran}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))

;; highlight long lines, from:
;; http://stackoverflow.com/questions/6344474/how-can-i-make-emacs-highlight-lines-that-go-over-80-chars
(defun highlight-long-lines ()
  "highlights lines longer than 80 characters"
  (interactive)
  (highlight-lines-matching-regexp ".\\{81\\}" (quote hi-green)))

;; actually, this is more useful to me than the above
(defun show-long-lines ()
  "goes to the next line longer than 80 characters"
  (interactive)
  (occur ".\\{81\\}"))

;; mac stuff:
(setq mac-option-key-is-meta nil)
(setq mac-command-key-is-meta t)
(setq mac-command-modifier 'meta)
(setq mac-option-modifier nil)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Some custom key bindings
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; The EmacsManual says that the combination of C-c followed by a
;; plain letter, and the function keys f5 through f9 are reserved for
;; users. That means that you can expect that no other mode ever uses
;; these -- it does not mean that you are limited to these,
;; however. You can of course rebind any key you want.
;;
;; above from
;; http://www.emacswiki.org/cgi-bin/wiki.pl/KeyBindingDiscussion
;;
(global-set-key "\C-cd" 'insert-date) ;; that's ctrl-c d

(global-set-key [f3] '(lambda ()
                           (interactive)
                           (shrink-window-horizontally 10)))
(global-set-key [f4] '(lambda ()
                           (interactive)
                           (enlarge-window-horizontally 10)))

;; this is the best bit of emacs advice I've ever seen.  Invoke M-x
;; without the Alt key!!!!  I got this from
;; http://www.cabochon.com/~stevey/blog-rants/effective-emacs.html
(global-set-key "\C-x\C-m" 'execute-extended-command)
(global-set-key "\C-cg" 'goto-line)
(global-set-key "\C-cv" 'view-file)
(global-set-key "\C-ceb" 'ediff-buffers)
(global-set-key "\C-cef" 'ediff)
(global-set-key "\C-csb" 'ispell-buffer)
(global-set-key "\C-csw" 'ispell-word)
(global-set-key "\C-csc" 'ispell-comments-and-strings)
(global-set-key "\C-csr" 'ispell-region)
(global-set-key "\C-co" 'occur)
(global-set-key [tab] 'smart-tab)
(global-set-key "\t" 'smart-tab)
(global-set-key [C-tab] 'other-window)
(global-set-key [f5] 'eval-buffer)
(global-set-key [f7] 'revert-buffer)
(global-set-key [f8] 'start-or-end-macro)
(global-set-key [f9] 'call-last-kbd-macro)
(global-set-key [f10] 'color-theme-dark-blue2)
(global-set-key [f11] 'next-error)
(global-set-key [f12] 'compile)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Some handy functions
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun insert-date()
  "Insert current date and time at point"
  (interactive)
  (insert (current-time-string)))

;;;;;; quick move cursor to top or bottom of screen ;;;;;
(defun point-to-top ()
  "Put point on top line of window."
  (interactive)
  (move-to-window-line 0))

(global-set-key [?\C-,] 'point-to-top)

(defun point-to-bottom ()
  "Put point at beginning of last visible line."
  (interactive)
  (move-to-window-line -1))

(global-set-key [?\C-.] 'point-to-bottom)

;; this is used by my auto-save hack:
(defun save-buffer-if-visiting-file (&optional args)
  "Save the current buffer only if it is visiting a file"
  (interactive)
  (if (and (buffer-file-name) (buffer-modified-p))
      (save-buffer args)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Got these from Yegge:
;; http://steve.yegge.googlepages.com/my-dot-emacs-file
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Never understood why Emacs doesn't have this function.
;;
(defun rename-file-and-buffer (new-name)
 "Renames both current buffer and file it's visiting to NEW-NAME."
 (interactive "sNew name: ")
 (let ((name (buffer-name))
	(filename (buffer-file-name)))
 (if (not filename)
	(message "Buffer '%s' is not visiting a file!" name)
 (if (get-buffer new-name)
	 (message "A buffer named '%s' already exists!" new-name)
	(progn 	 (rename-file name new-name 1) 	 (rename-buffer new-name) 	 (set-visited-file-name new-name) 	 (set-buffer-modified-p nil)))))) ;;
;; Never understood why Emacs doesn't have this function, either.
;;
(defun move-buffer-file (dir)
 "Moves both current buffer and file it's visiting to DIR."
 (interactive "DNew directory: ")
 (let* ((name (buffer-name))
	 (filename (buffer-file-name))
	 (dir
	 (if (string-match dir "\\(?:/\\|\\\\)$")
	 (substring dir 0 -1) dir))
	 (newname (concat dir "/" name)))

 (if (not filename)
	(message "Buffer '%s' is not visiting a file!" name)
 (progn 	(copy-file filename newname 1) 	(delete-file filename) 	(set-visited-file-name newname) 	(set-buffer-modified-p nil) 	t)))) 

(defun insert-file-name()
  "Inserts the file name at the current point"
  (interactive)
  (insert (buffer-name)))

;; this entry:
;; http://www.emacsblog.org/2007/02/27/quick-tip-add-occur-to-isearch/,
;; linked to this:
;; http://blog.zenspider.com/archives/2007/02/new_category_emacs.html,
;; which gave me this awesome thing.  Hit c-o while doing a c-s search
;; and it does an occur on what your searching for.
(define-key isearch-mode-map (kbd "C-o")
  (lambda ()
    (interactive)
    (let ((case-fold-search isearch-case-fold-search))
      (occur (if isearch-regexp isearch-string
               (regexp-quote isearch-string))))))

;; Got this from: http://www.emacswiki.org/cgi-bin/wiki/MacroKey
(defun start-or-end-macro (arg)
  "Starts or ends the defining of a keyboard macro, depending on
whether you are defining one at the moment or not"
  (interactive "P")
  (if defining-kbd-macro
      (if arg
          (end-kbd-macro arg)
          (end-kbd-macro))
      (start-kbd-macro arg)))

;; kill-matching-buffers-by-filename is handy when you have opened a
;; bunch of files from a certain directory, and now you are done
;; working on that group of files.  Got this from:
;; http://keypod.net/wordpress/2008/08/30/emacs-kill-matching-buffers-by/
(defun act-on-buffers (pred action)
  (let ((count 0))
	(dolist(buffer (buffer-list))
	  (when (funcall pred buffer)
		(setq count (1+ count))
		(funcall action buffer)))
	count))
 
(defun kill-matching-buffers-by (acc)
  "Kill buffers whose name matches the input"
  (let* 
	  ((re (read-string (format "kill buffers matching: ")))
	   (match (function 
			   (lambda (buf) 
				 (string-match re (funcall acc buf)))))
	   (kill #'(lambda (buf) (kill-buffer buf)))
	   (count (act-on-buffers match kill)))
 
    (message "%d buffer(s) killed" count)))
 
(defun kill-matching-buffers-by-filename ()
  (interactive)
  (kill-matching-buffers-by #'(lambda (b) (or (buffer-file-name b) ""))))

;; imenu and ido, an awesome combo for navigating around a buffer.
;; This came from: http://www.emacswiki.org/emacs/ImenuMode#toc10 as
;; recommended here:
;; http://www.masteringemacs.org/articles/2011/01/14/effective-editing-movement/
(defun ido-goto-symbol (&optional symbol-list)
  "Refresh imenu and jump to a place in the buffer using Ido."
  (interactive)
  (unless (featurep 'imenu)
    (require 'imenu nil t))
  (cond
   ((not symbol-list)
    (let ((ido-mode ido-mode)
          (ido-enable-flex-matching
           (if (boundp 'ido-enable-flex-matching)
               ido-enable-flex-matching t))
          name-and-pos symbol-names position)
      (unless ido-mode
        (ido-mode 1)
        (setq ido-enable-flex-matching t))
      (while (progn
               (imenu--cleanup)
               (setq imenu--index-alist nil)
               (ido-goto-symbol (imenu--make-index-alist))
               (setq selected-symbol
                     (ido-completing-read "Symbol? " symbol-names))
               (string= (car imenu--rescan-item) selected-symbol)))
      (unless (and (boundp 'mark-active) mark-active)
        (push-mark nil t nil))
      (setq position (cdr (assoc selected-symbol name-and-pos)))
      (cond
       ((overlayp position)
        (goto-char (overlay-start position)))
       (t
        (goto-char position)))))
   ((listp symbol-list)
    (dolist (symbol symbol-list)
      (let (name position)
        (cond
         ((and (listp symbol) (imenu--subalist-p symbol))
          (ido-goto-symbol symbol))
         ((listp symbol)
          (setq name (car symbol))
          (setq position (cdr symbol)))
         ((stringp symbol)
          (setq name symbol)
          (setq position
                (get-text-property 1 'org-imenu-marker symbol))))
        (unless (or (null position) (null name)
                    (string= (car imenu--rescan-item) name))
          (add-to-list 'symbol-names name)
          (add-to-list 'name-and-pos (cons name position))))))))

(global-set-key "\M-i" 'ido-goto-symbol) ; or any key you see fit

(defun insert-uvm-info()
  "Insert a uvm_info template with psprintf"
  (interactive)
  (insert "`uvm_info(get_full_name(), \"\", UVM_MEDIUM)")
  ;; if the above string changes, you might want to change this to so
  ;; the cursor ends up inside the string where you are going to start
  ;; typing next:
  (backward-char 14)
)

(global-set-key "\C-ci" 'insert-uvm-info)

(defun insert-uvm-info-with-psprintf()
  "Insert a uvm_info template with psprintf"
  (interactive)
  (insert "`uvm_info(get_full_name(), $psprintf(\"\", ), UVM_MEDIUM)")
  ;; if the above string changes, you might want to change this to so
  ;; the cursor ends up inside the string where you are going to start
  ;; typing next:
  (backward-char 17)
)

(global-set-key "\C-cp" 'insert-uvm-info-with-psprintf)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Hopefully everything above this works for the basic emacs
;; distribution.  Every below this is for stuff I've downloaded.
;;
;; I'm now attempting to use el-get to install all packages not
;; included with emacs, following the advice here:
;;
;; http://danielsz.github.io/towards-a-declarative-dependency-management-s/index.html/
;;
;; so far, I really like it.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; el-get stuff:
(add-to-list 'load-path "~/.emacs.d/el-get/el-get")
(setq el-get-user-package-directory "~/.emacs.d/packages.d/")
(unless (require 'el-get nil 'noerror)
  (with-current-buffer
      (url-retrieve-synchronously
       "https://raw.github.com/dimitri/el-get/master/el-get-install.el")
    (goto-char (point-max))
    (eval-print-last-sexp)))

;; keep this sorted alphabetically (use sort-lines) (NOTE: color-theme
;; is just for color-theme-dark-blue2, it would be cool if I could
;; port just that theme over to the new theme system).
(defvar my-packages
  '(
    ;; REVISIT: broken, can't find autoconf on mac?: auctex
    ;; REVISIT: no el-get for tbemail, submit patch to el-get?
    color-theme
    graphviz-dot-mode
    guess-offset
;; el-get freaks out about this package now...
;;    ido-ubiquitous
    smart-tab
    xcscope
    yaml-mode
    )
  "List of packages that I like.")

;; Not that as long as an el-get recipe in this list does not define a
;; :type property then it will get merged with the original recipe of
;; the same name.
(setq el-get-sources '((:name color-theme
                              :after (if window-system
                                         (color-theme-dark-blue2)
                                       (color-theme-tty-dark)))))
;; Why did this go away?
;(el-get-cleanup my-packages)
(el-get 'sync my-packages)

;; set default color theme, after el-get has loaded everything.  Got
;; this after-init-hook advice from:
;; http://www.emacswiki.org/emacs/ELPA
;;
;; I really wanted the eval-after-load thing from that page to work,
;; it looked cleaner, but it just didn't work.  Something different
;; about el-get that breaks that?  I don't know.
;; (add-hook 'after-init-hook
;;           (lambda()
;;             (if window-system
;;                 (color-theme-dark-blue2)
;;               (color-theme-tty-dark))
;; ;            (ido-ubiquitous-mode t)
;; ))


;;; added by emacs when I used the customize menu to change some stuff ;;;
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-safe-themes (quote ("d6a00ef5e53adf9b6fe417d2b4404895f26210c52bb8716971be106550cea257" "fc5fcb6f1f1c1bc01305694c59a1a861b008c534cae8d0e48e4d5e81ad718bc6" default))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
